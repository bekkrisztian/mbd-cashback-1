# Default values for myapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


env: {}
# configuration for grapple ApplicationSet (gras)
gras-deploy:
  enabled: false
gras:
  enabled: true
  gras: {}
  grapi:
    # beimagetag: "v0.130"
    beimage: grpl/grapi
    beimagetag: 0.2.9
    discoveredrepos: true
    ingress: true
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    initContainers:
      - name: init-db
        spec:
          name: init-db
          image: mysql
          command:
            - bash
            - -c
            - sleep 5; while ! mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "show databases;" 2>/dev/null; do echo -n .; sleep 2; done; if mysql -h $(host) -P $(port) -u $(username) -p$(password) -e "SET @tablename := (select table_name from information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'mbdpp' limit 1); set @qry1:= concat('select * from ',@tablename,' limit 1'); prepare stmt from @qry1 ; execute stmt ;" 2>/dev/null; then echo "database already exists..."; else curl -o /tmp/mbdpp.sql https://raw.githubusercontent.com/grapple-solutions/grapple-test-data/main/mbd-cashback/mbdpp-backup-dev.sql; mysql -h $(host) -P $(port) -u $(username) -p$(password) < /tmp/mbdpp.sql; rm /tmp/mbdpp.sql; fi
    extraSecrets:
      - mbddb-conn-credential
    datasources:
      - name: mbdpp
        spec:
          mysql:
            database: mbdpp
            host: $(host)
            name: mbdpp
            password: $(password)
            port: $(port)
            url: ""
            user: $(username)
    discoveries:
      - name: mbdpp
        spec:
          all: true
          dataSource: mbdpp
          disableCamelCase: false
          schema: mbdpp
    repositories:
      - name: classicmodelsid
        spec:
          datasource: classicmodelsid
          model: clients
    relations:
      - name: personalinformation
        spec:
          relationName: personalinformation
          sourceModel: Purchasepaybacks
          destinationModel: Personalinformation
          foreignKeyName: personalinformationId
          relationType: belongsTo
          registerInclusionResolver: true
      - name: purchasereceipts
        spec:
          relationName: purchasereceipts
          sourceModel: Purchasepaybacks
          destinationModel: Purchasereceipts
          foreignKeyName: purchasereceiptsId
          relationType: belongsTo
          registerInclusionResolver: true
      - name: dealerships
        spec:
          relationName: dealerships
          sourceModel: Purchasereceipts
          destinationModel: Dealerships
          foreignKeyName: dealershipsId
          relationType: belongsTo
          registerInclusionResolver: true
      - name: employees
        spec:
          relationName: employees
          sourceModel: Customers
          destinationModel: Employees
          foreignKeyName: employeesId
          relationType: belongsTo
          registerInclusionResolver: true
    restcruds:
      - name: "mbdpp"
        spec:
          datasource: "mbdpp"
    controllers: []
    postpatches: []
    injections: []
    prerelationpatches: []
  gruim:
    # uiimagetag: "0.1.38"
    uiimage: grpl/gruim
    uiimagetag: 0.2.9
    ssl: true
    sslissuer: letsencrypt-grapple-demo
    style: '{"colors":{"primary":{"DEFAULT":"#004a99","fg":"#ffffff"},"accent":{"DEFAULT":"#fa7252","fg":"#ffffff"}}}'
    config: '{"global":{"list-size":10,"field-properties":{"id":{"readonly":true}}},"schema":{"Purchasepaybacks":{"field-order":["id","date","completed","status","rejectionReason","cashbackType","personalinformation","personalinformationId","purchasereceipts","purchasereceiptsId","questions","personalinformationIdIdentified","personalinformationOverride","paidDate","paidByMbdDate"],"field-properties":{"hidden-fields":["salesRepEmployeeNumber","state"],"readonly-fields":["id"]},"validations":{"id":{"nullable":false,"validation":"/[0-9]/"},"email":{"email":true}}},"Personalinformation":{"field-order":["id","name","email","address","addressVerified","phone","phoneVerified","iban","ibanVerified","addressGeolocation"],"field-properties":{"hidden-fields":["salesRepEmployeeNumber","state"],"boolean-fields":["addressVerified","phoneVerified","ibanVerified"],"readonly-fields":["id"],"json-fields":[{"field":"address","template":"${street},${zip}${city}"}]}},"Purchasereceipts":{"field-order":["id","dealershipsId","purchaseDate","partsId","partsCount","vehicleVersion","vehicleVIN","storage","switch","dealershipIdentified","dealerOverride","datesIdentified","purchaseDateOverride","partsIdentified","partsOverrride","storageIdentified","storageOverride","switchIdentified","switchOverride","rekognitionResponse","raw"],"field-properties":{"hidden-fields":["raw"],"boolean-fields":["dealerOverride","purchaseDateOverride","partsOverrride","storageOverride","switchOverride"],"readonly-fields":["id"]}},"Dealerships":{"field-order":["id","vfnr","name","plz","ort","strasse","vfnrhb","betriebsart"],"field-properties":{"hidden-fields":["none"]}}}}'
    additionalpackages: ""
    custommodules: []
replicaCount: 1
image:
  repository: grpl/grapple-template-pr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.45.pr-33"
imagetest:
  repository: app
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
